package objects.iou

struct TimestampedAmount {
    amount: Number,
    timestamp: DateTime
};

function total(entries: List<TimestampedAmount>) -> entries.map(function(p: TimestampedAmount) -> p.amount).sum();

notification RepaymentOccurence(paymentAmount: Number, remainingAmount: Number) returns Unit;

@api
protocol[issuer, payee] Iou(var description: Text, var forAmount: Number) {
    require(forAmount > 0, "Initial amount must be strictly positive");

    initial state unpaid;
    state pending_acknowledgement;
    state paid;
    final state confimed_repayment;
    final state forgiven;

    private var payments = listOf<TimestampedAmount>();
    var amountOwned: Number = forAmount;

    function getAmountOwed() returns Number -> forAmount - total(payments);

    @api
    permission[issuer] pay(amount: Number) | unpaid, pending_acknowledgement {
        require(amount > 0, "Amount must be strictly positive");
        require(amount <= getAmountOwed(), "Amount may not exceed amount owed");

        var p = TimestampedAmount(amount = amount, timestamp = now());

        payments = payments.with(p);
        amountOwned = getAmountOwed();

        notify RepaymentOccurence(amount, amountOwned);

        if (amountOwned == 0) {
            become paid;
        } else {
            become pending_acknowledgement;
        };
    };

    @api
    permission[payee] acknowledgePayment() | unpaid, pending_acknowledgement {
        become unpaid;
    };

    @api
    permission[payee] confirmRepayment() | paid {
        become confimed_repayment;
    };

    @api
    permission[payee] forgive() | unpaid {
        become forgiven;
    };
}
