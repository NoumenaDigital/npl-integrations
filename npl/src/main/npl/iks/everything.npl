package iks;

// Test run protocol
// Control protocol
// Control step protocol
// Automated analysis protocol
// Manual action protocol

protocol[controlOwner] File() { };

protocol[controlOwner] TestRun(
    var executionDate: DateTime
) {

    var controls: List<ExternalLibraryControl> = listOf<ExternalLibraryControl>(
        /* ExternalLibraryControl[controlOwner](
            ITProduct = "SAP",
            vNumber = "1.0"
        )*/
    );
};

enum ExternalLibraryControlStatus {
    UNSET, PARIAL, ENTFÄLT, COMPLETE
};

protocol[controlOwner, tester] ExternalLibraryControl(
    // 1 control
    var ITProduct: Text, // uniqueness requirement
    var vNumber: Text, // uniquness requirement
    var file: File
) {

    initial state pending;
    state complete; // could be more granular

    var status: ExternalLibraryControlStatus = ExternalLibraryControlStatus.UNSET;

    var tailoringPlausibilisierung: TailoringPlausibilisierung = TailoringPlausibilisierung[controlOwner, tester](
        vNumber = vNumber,
        file = file
    );
    var eliasDokumentation: ELiASDokumentation = ELiASDokumentation[controlOwner, tester](
        vNumber = vNumber,
        file = file
    );

    permission[controlOwner | tester] setIntermediateResult() {

    };

    permission[controlOwner] setResults(
        tailoringPlausibilisierungResult: TailoringPlausibilisierungStatus,
        eliasDokumentationResult: ELiASDokumentationStatus
    )  {
        tailoringPlausibilisierung.setResult[controlOwner](tailoringPlausibilisierungResult);
        eliasDokumentation.setResult[controlOwner](eliasDokumentationResult);

        if (
            tailoringPlausibilisierung.status == TailoringPlausibilisierungStatus.COMPLETE &&
            eliasDokumentation.status == ELiASDokumentationStatus.COMPLETE
        ) {
            status = ExternalLibraryControlStatus.COMPLETE;
            become complete;
        };
    };

    permission[controlOwner] setFinalResults(
        newStatus: ExternalLibraryControlStatus
    ) | pending {
        require(newStatus != ExternalLibraryControlStatus.UNSET, "New status cannot be UNSET");

        status = newStatus;
        become complete
    };
};

enum TailoringPlausibilisierungStatus {
    UNSET, PARIAL, ENTFÄLT, COMPLETE
};

protocol[controlOwner, tester] TailoringPlausibilisierung(
    // 1 control step
    vNumber: Text,
    file: File
) {

    initial state pending;
    state complete;

    var status: TailoringPlausibilisierungStatus = TailoringPlausibilisierungStatus.UNSET;

    var externalLibraryUsage: ExternalLibraryUsage = ExternalLibraryUsage[controlOwner, tester](
        vNumber = vNumber,
        file = file
    );

    permission[controlOwner | tester] setResult(newStatus: TailoringPlausibilisierungStatus) | pending {
        status = newStatus;
        become complete;
    };
};

enum ExternalLibraryUsageStatus {
    UNSET,
    PARIAL,
    ENTFÄLT,
    COMPLETE // update
};

protocol[controlOwner, tester] ExternalLibraryUsage(
    vNumber: Text,
    file: File
) {

    initial state pending;
    state complete;

    var status: ExternalLibraryUsageStatus = ExternalLibraryUsageStatus.UNSET;

    permission[tester] setResult(newStatus: ExternalLibraryUsageStatus) | pending {
        status = newStatus;
        become complete;
    };
};

enum ELiASDokumentationStatus {
    UNSET, PARIAL, ENTFÄLT, COMPLETE
};

protocol[controlOwner, tester] ELiASDokumentation(
    vNumber: Text,
    file: File // maybe multiple files?
) {

    initial state pending;
    state complete;

    var status: ELiASDokumentationStatus = ELiASDokumentationStatus.UNSET;

    var externalLibraryUsage: ExternalLibraryUsage = ExternalLibraryUsage[controlOwner, tester](
        vNumber = vNumber,
        file = file
    );

    permission[controlOwner | tester] setResult(newStatus: ELiASDokumentationStatus) | pending {
        status = newStatus;
        become complete;
    };
};
